"""
========================================
MODELO: CLIENTE
========================================
Este archivo define la clase Cliente que representa
la tabla 'clientes' en PostgreSQL.

Cada instancia de esta clase es un cliente de la tienda virtual.
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text
from sqlalchemy.sql import text
from typing import Any
from ..database import Base


class Cliente(Base):
    """
    游논 CLASE CLIENTE - Representa un cliente de la tienda

    Esta clase es un modelo de SQLAlchemy que se mapea a la tabla
    'clientes' en PostgreSQL. Cada atributo es una columna de la tabla.

    Ejemplo de uso:
        # Crear un nuevo cliente
        nuevo_cliente = Cliente(
            nombre="Mar칤a Gonz치lez",
            email="maria@email.com",
            telefono="+57 300 123 4567",
            ciudad="Medell칤n",
            grupo_creador="GRUPO_1"
        )

    Campos principales:
        - id: Identificador 칰nico (se genera autom치ticamente)
        - nombre: Nombre completo del cliente
        - email: Correo electr칩nico (칔NICO)
        - telefono: N칰mero de tel칠fono
        - direccion: Direcci칩n de entrega
        - ciudad: Ciudad de residencia
        - documento: N칰mero de documento (칔NICO)

    Campos de auditor칤a:
        - activo: Si est치 activo o fue eliminado (l칩gicamente)
        - fecha_creacion: Cu치ndo se cre칩
        - fecha_actualizacion: 칔ltima modificaci칩n
        - grupo_creador: Qu칠 grupo lo cre칩
        - grupo_ultima_modificacion: 칔ltimo grupo que lo modific칩
    """

    # Nombre de la tabla en la base de datos PostgreSQL
    __tablename__ = "clientes"

    # ========================================
    # COLUMNAS PRINCIPALES
    # ========================================

    id = Column(
        Integer,
        primary_key=True,  # Clave primaria
        index=True,        # 칈ndice para b칰squedas r치pidas
        autoincrement=True,  # Auto-incrementa autom치ticamente
        comment="Identificador 칰nico del cliente (PK)"
    )

    nombre = Column(
        String(100),      # M치ximo 100 caracteres
        nullable=False,   # Campo obligatorio
        comment="Nombre completo del cliente"
    )

    email = Column(
        String(150),
        nullable=False,   # Campo obligatorio
        unique=True,      # 丘멆잺 NO puede haber emails duplicados
        index=True,       # 칈ndice para b칰squedas r치pidas por email
        comment="Correo electr칩nico del cliente (칰nico en toda la BD)"
    )
    # El email es 칔NICO en toda la base de datos.
    # Si dos grupos intentan crear clientes con el mismo email,
    # el segundo dar치 error.

    telefono = Column(
        String(20),
        nullable=True,    # Campo opcional
        comment="N칰mero de tel칠fono del cliente"
    )

    direccion = Column(
        Text,             # Texto largo
        nullable=True,    # Campo opcional
        comment="Direcci칩n de entrega del cliente"
    )

    ciudad = Column(
        String(100),
        nullable=True,    # Campo opcional
        index=True,       # 칈ndice para filtrar por ciudad
        comment="Ciudad de residencia"
    )

    documento = Column(
        String(20),
        nullable=True,    # Campo opcional
        unique=True,      # 丘멆잺 NO puede haber documentos duplicados
        index=True,       # 칈ndice para b칰squedas por documento
        comment="N칰mero de documento de identidad (칰nico)"
    )
    # El documento tambi칠n es 칔NICO.
    # Dos clientes no pueden tener el mismo documento.

    # ========================================
    # COLUMNAS DE AUDITOR칈A Y CONTROL
    # ========================================

    activo = Column(
        Boolean,
        default=True,     # Por defecto todos los clientes est치n activos
        nullable=False,
        comment="Indica si el cliente est치 activo (eliminaci칩n l칩gica)"
    )
    # Eliminaci칩n l칩gica: en lugar de borrar el cliente,
    # solo lo marcamos como inactivo (activo = False).

    fecha_creacion = Column(
        DateTime(timezone=True),  # Incluye zona horaria
        server_default=text("NOW()"),  # PostgreSQL pone fecha autom치ticamente
        nullable=False,
        comment="Fecha y hora de creaci칩n del registro",
    )

    fecha_actualizacion = Column(
        DateTime(timezone=True),
        server_default=text("NOW()"),  # Fecha inicial
        onupdate=text("NOW()"),  # Se actualiza autom치ticamente al modificar
        nullable=False,
        comment="Fecha y hora de 칰ltima actualizaci칩n",
    )

    grupo_creador = Column(
        String(50),
        nullable=False,
        index=True,       # 칈ndice para filtrar por grupo
        comment="Nombre del grupo de estudiantes que cre칩 el cliente"
    )
    # Se llena autom치ticamente con settings.GRUPO_ESTUDIANTES

    grupo_ultima_modificacion = Column(
        String(50),
        nullable=True,    # Opcional porque al crear es NULL
        comment="Nombre del grupo que hizo la 칰ltima modificaci칩n"
    )

    def __repr__(self):
        """
        Representaci칩n en string del objeto.
        칔til para debugging y logs.

        Returns:
            str: Representaci칩n legible del cliente
        """
        return (
            f"<Cliente(id={self.id}, nombre='{self.nombre}', " f"email='{self.email}')>"
        )

    def to_dict(self) -> dict[str, Any]:
        """
        Convierte el objeto Cliente a un diccionario.
        칔til para serializar a JSON.

        Returns:
            dict: Diccionario con todos los campos del cliente
        """
        return {
            "id": self.id,
            "nombre": self.nombre,
            "email": self.email,
            "telefono": self.telefono,
            "direccion": self.direccion,
            "ciudad": self.ciudad,
            "documento": self.documento,
            "activo": self.activo,
            "fecha_creacion": (
                self.fecha_creacion.isoformat()
                if self.fecha_creacion is not None  # type: ignore
                else None
            ),
            "fecha_actualizacion": (
                self.fecha_actualizacion.isoformat()
                if self.fecha_actualizacion is not None  # type: ignore
                else None
            ),
            "grupo_creador": self.grupo_creador,
            "grupo_ultima_modificacion": self.grupo_ultima_modificacion,
        }
