{
  // Tareas autom√°ticas para VS Code
  // Estas tareas se ejecutan autom√°ticamente antes de iniciar la API
  "version": "2.0.0",
  "tasks": [
    {
      // ‚ú® Tarea 1: Instalar dependencias autom√°ticamente
      "label": "Instalar Dependencias",
      "type": "shell",
      "windows": {
        // En Windows CMD (activate.bat)
        // Activa el entorno virtual y luego instala dependencias
  "command": "if not exist venv ( python -m venv venv ) && call venv\\Scripts\\activate.bat && python -m pip install --upgrade pip --quiet && python -m pip install -r requirements.txt --quiet"
      },
      "linux": {
        // En Linux/Mac
  "command": "if [ ! -d \"venv\" ]; then python -m venv venv; fi && . venv/bin/activate && python -m pip install --upgrade pip --quiet && python -m pip install -r requirements.txt --quiet"
      },
      "osx": {
        // En macOS
  "command": "if [ ! -d \"venv\" ]; then python -m venv venv; fi && . venv/bin/activate && python -m pip install --upgrade pip --quiet && python -m pip install -r requirements.txt --quiet"
      },
      "options": {
        "shell": {
          "executable": "cmd.exe",
          "args": ["/d", "/c"]
        }
      },
      "presentation": {
        // Configuraci√≥n de c√≥mo se muestra la salida
        "echo": true, // Mostrar el comando ejecutado
        "reveal": "silent", // No abrir el panel de salida autom√°ticamente
        "focus": false, // No poner foco en el panel
        "panel": "shared", // Usar panel compartido
        "showReuseMessage": false,
        "clear": false
      },
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": false
      }
      // ‚ÑπÔ∏è EXPLICACI√ìN:
      // Esta tarea hace tres cosas:
      // 1. Activa el entorno virtual con activate.bat (CMD)
      // 2. Actualiza pip a la √∫ltima versi√≥n (--quiet para no mostrar mucha salida)
      // 3. Instala todas las dependencias de requirements.txt
      //
      // Se ejecuta AUTOM√ÅTICAMENTE antes de iniciar la API (configurado en launch.json)
      //
      // ‚ö†Ô∏è IMPORTANTE: Usa CMD (activate.bat) en lugar de PowerShell (Activate.ps1)
      // porque en los computadores de los estudiantes funciona mejor activate.bat
      //
      // Si las dependencias ya est√°n instaladas, el comando es muy r√°pido.
      // Solo instalar√° las que falten o necesiten actualizaci√≥n.
      //
      // ‚úÖ VENTAJAS:
      // - Los estudiantes NO necesitan ejecutar pip install manualmente
      // - Siempre tienen las dependencias actualizadas
      // - Evita errores de "ModuleNotFoundError"
      // - Compatible con CMD (activate.bat)
    },
    {
      // üßπ Tarea 2: Limpiar archivos __pycache__ (opcional)
      "label": "Limpiar Cache Python",
      "type": "shell",
      "windows": {
        "command": "for /d /r . %d in (__pycache__) do @if exist \"%d\" rd /s /q \"%d\" & del /s /q *.pyc 2>nul"
      },
      "options": {
        "shell": {
          "executable": "cmd.exe",
          "args": ["/d", "/c"]
        }
      },
      "linux": {
        "command": "find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true; find . -type f -name '*.pyc' -delete 2>/dev/null || true"
      },
      "osx": {
        "command": "find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true; find . -type f -name '*.pyc' -delete 2>/dev/null || true"
      },
      "presentation": {
        "echo": true,
        "reveal": "silent",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": false
      },
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": false
      }
      // ‚ÑπÔ∏è EXPLICACI√ìN:
      // Esta tarea elimina archivos temporales de Python (__pycache__ y .pyc)
      // Es √∫til cuando hay problemas con m√≥dulos que no se actualizan.
      //
      // Para ejecutarla manualmente:
      // 1. Ctrl+Shift+P
      // 2. "Tasks: Run Task"
      // 3. Seleccionar "Limpiar Cache Python"
    },
    {
      // üîç Tarea 3: Verificar configuraci√≥n del entorno
      "label": "Verificar Entorno",
      "type": "shell",
      "windows": {
        "command": "python --version && pip --version && echo '‚úÖ Python y pip est√°n instalados correctamente'"
      },
      "linux": {
        "command": "python3 --version && pip3 --version && echo '‚úÖ Python y pip est√°n instalados correctamente'"
      },
      "osx": {
        "command": "python3 --version && pip3 --version && echo '‚úÖ Python y pip est√°n instalados correctamente'"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false
      },
      "problemMatcher": []
      // ‚ÑπÔ∏è EXPLICACI√ìN:
      // Esta tarea verifica que Python y pip est√©n instalados correctamente.
      // √ötil para diagnosticar problemas de instalaci√≥n.
      //
      // Para ejecutarla manualmente:
      // 1. Ctrl+Shift+P
      // 2. "Tasks: Run Task"
      // 3. Seleccionar "Verificar Entorno"
    },
    {
      // üì¶ Tarea 4: Mostrar dependencias instaladas
      "label": "Listar Dependencias Instaladas",
      "type": "shell",
      "windows": {
        "command": "pip list"
      },
      "linux": {
        "command": "pip3 list"
      },
      "osx": {
        "command": "pip3 list"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false
      },
      "problemMatcher": []
      // ‚ÑπÔ∏è EXPLICACI√ìN:
      // Muestra todas las librer√≠as de Python instaladas en el entorno.
      // √ötil para verificar versiones o si falta alguna dependencia.
      //
      // Para ejecutarla manualmente:
      // 1. Ctrl+Shift+P
      // 2. "Tasks: Run Task"
      // 3. Seleccionar "Listar Dependencias Instaladas"
    }
  ]
}
